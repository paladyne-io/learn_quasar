import{Q as h}from"./QImg.edac252c.js";import{Q as p}from"./QTable.b944aa22.js";import{Q as l}from"./QBtn.ab19e1cc.js";import{Q as u}from"./QPage.f88b74ab.js";import{r as f,o as _,n,p as g,q as i,y as b,z as e,d as t,A as w,t as v,j as y,u as s}from"./index.82d8e8d2.js";import"./QSpinner.8c1cfb25.js";import"./use-size.b600137d.js";import"./render.20872597.js";import"./QIcon.cd766012.js";import"./QSeparator.5b4e86b8.js";import"./use-dark.ad623787.js";import"./selection.6700afe2.js";import"./use-router-link.537c4759.js";import"./use-tick.12e11592.js";import"./use-key-composition.e68117ef.js";import"./format.a33550d6.js";import"./uid.42677368.js";import"./QItem.234f75e7.js";import"./QItemSection.a280fd8e.js";import"./QItemLabel.9c616a92.js";import"./use-form.0b80a382.js";import"./use-checkbox.5941d962.js";const k={class:"row border full-width q-pa-md"},x={class:"col-12 col-md-6 text-center"},q={key:0,class:"col-12 col-md-6"},C={class:"q-pa-md"},Q={class:"full-width text-center"},S={class:"text-center q-pa-md"},T=e("div",{class:"q-pa-md"}," In this first example we just display the data table when the button is clicked. Method: Wrap the component in a <Transition> with 'v-if' and a variable, 'dogStatsVisible'. The transition is triggered when the (boolean) value of the 'dogStatsVisible' variable is changed, switching the visibility of the component. ",-1),V=e("pre",null,`  <transition
     appear
        enter-active-class="animated bounceIn"
        leave-active-class="animated fadeOut"
  >
  <div v-if="dogStatsVisible" class="col-12 col-md-6">
  ...
  </transition>
  `,-1),I=e("div",{class:"q-pa-md full-width"}," Note that we have added some Quasar helper classes to automatically change the position of the table based on the width of the display. This is called Responsive design. When we load this page on a mobile phone, the table will display under the image. If we load it on a PC or tablet, the table wil be shown on the right side. Further, if we resize the browser window the display will update automatically. ",-1),B=e("div",{class:"q-pa-md"}," It works but it's pretty basic. Ideally we would like to show the data table as if it is printed on the back and visually flip the card. ",-1),D={class:"q-pa-md full-width"},N=s(" Lets try "),M=s(" that"),P=s(". "),W={class:"text-center q-pa-md"},ne={__name:"MyDogAppPage",setup(j){const a=f(!1);_(()=>{console.log("mounted")});const r=[{name:"name",required:!0,label:"Exercise",align:"left",field:o=>o.name,format:o=>`${o}`,sortable:!0},{name:"Time",align:"left",label:"Time (minutes)",field:"time",sortable:!0},{name:"calories",align:"center",label:"Calories",field:"calories",sortable:!0},{name:"fat",label:"Fat (g)",field:"fat",sortable:!0}],c=[{name:"Walking",time:30,calories:159,fat:6},{name:"Running in the park",time:30,calories:237,fat:9},{name:"Sleeping",time:90,calories:10,fat:1},{name:"Chasing cars",time:10,calories:200,fat:3.7},{name:"Chasing cats",time:10,calories:100,fat:8},{name:"Chasing tail",time:30,calories:50,fat:10}];function d(){console.log("showDogStats"+a.value),a.value=!a.value}return(o,z)=>{const m=b("router-link");return n(),g(u,{class:"flex flex-center"},{default:i(()=>[e("div",k,[e("div",x,[t(h,{class:"q-ma-md",style:{height:"480px",width:"350px"},alt:"Dog image",src:"images/dog.png"})]),t(y,{appear:"","enter-active-class":"animated bounceIn","leave-active-class":"animated fadeOut"},{default:i(()=>[a.value?(n(),w("div",q,[e("div",C,[t(p,{title:"My Dog",rows:c,columns:r,"row-key":"name"})])])):v("",!0)]),_:1})]),e("div",Q,[e("div",S,[t(l,{label:"Show stats",color:"blue",onClick:d})])]),T,V,I,B,e("div",D,[N,t(m,{to:"2"},{default:i(()=>[M]),_:1}),P]),e("div",W,[t(l,{label:"Home",color:"green",to:"/"})])]),_:1})}}};export{ne as default};
