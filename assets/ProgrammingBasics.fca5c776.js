import{Q as d}from"./QBtn.20530fe3.js";import{Q as r}from"./QItem.1a4bc350.js";import{Q as p}from"./QCard.9c633ffd.js";import{Q as f}from"./QPage.c05c0cbb.js";import{R as h}from"./use-router-link.85ad0aa6.js";import{P as _}from"./PreComponentDA.e8ef039e.js";import{_ as v,K as g,L as a,M as l,N as n,S as b,U as e,d as s,q as u,Q as t}from"./index.09400d3f.js";import"./QIcon.c1a86983.js";import"./use-size.e0f206da.js";import"./render.ee005508.js";import"./QSpinner.afab2eee.js";import"./use-dark.7a67e974.js";import"./DarkModeComponent.5d7df534.js";import"./use-quasar.b45ba28e.js";const y=g({name:"HelloWorld",components:{PreComponentDA:_},setup(){function o(){alert("You clicked me!")}return{btnClicked:o}}}),w=e("div",{class:"q-pa-md text-h5 text-bold"}," Programming Basics",-1),k=e("div",{class:"text-subheader q-pt-sm"}," The world is your stage ",-1),x=e("div",{class:"q-pt-sm"}," Your mission today is to get to this: ",-1),q=e("div",{class:"q-pt-sm"}," This is the basic order of tasks. ",-1),C={class:"q-pa-sm"},I=e("div",{class:"q-pt-md text-subheader"}," 1. Add interactivty So far we have covered how to set up and use Quasar and how to create, modify and navigate between pages. I'd like to focus this exercise on showing how to actually program some activity. ",-1),P=e("div",{class:"q-pt-sm"},[t(" Each Vue page or component (xx.vue file) can have up to 3 sections: "),e("ul",null,[e("li",null,[t("the "),e("b",null,"template"),t(" section which contains html, including custom components and some vue elements")]),e("li",null,[t("the "),e("b",null,"script"),t(" section which is javascript, with some unique functions and 'hooks'")]),e("li",null,[t("the "),e("b",null,"style"),t(" section which is css")])])],-1),T=e("div",{class:"q-pt-sm"}," Simply speaking, the template is what the page contains, the script is what it does and the style is how it looks. ",-1),Q=e("div",{class:"q-pt-sm"}," In traditional web design these 3 types are usually separated into 3 files. The JavaScript file (xx.js) and the css file (xx.css) are imported - most often in the header - of the HTML file (xx.html). Why combine them into one file? ",-1),S=e("div",{class:"q-pt-sm"},[t(" This is called a SingleFileComponent and you can read more about it "),e("a",{href:"https://vuejs.org/guide/scaling-up/sfc.html"},"here"),t(". ")],-1),j=e("div",{class:"q-pt-sm"},[e("q",null,"In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable. ")],-1),B=e("div",{class:"q-pt-sm"}," When you integrate all 3 types of code into one file this becomes a stand-alone object that you can use in other parts of your app. It comes fully formed and ready to work. If you decide later to modify this component, everywhere it is used will gain the benefit of the improvements. Of course this is a double-edged sword as if you do something wrong it could affect other parts of your app. Embedding the behaviour (logic) inside an object is a key principle of Object Oriented Programming. Thinking in terms of independent objects and their interactions will make your code more usable and easier to manage. Once you get used to it I don't think you will want to do it another way. ",-1),A={class:"q-pt-sm"},M=t(" Some areas we will cover: "),N=e("ul",null,[e("li",null,"Handling user activity such as a button click"),e("li",null,"script setup"),e("li",null,"Composition vs Options API")],-1),$=t(" What we will come back to later: "),D=e("ul",null,[e("li",null,"Reactivity"),e("li",null,"v-if and v-for"),e("li",null,"Props and slots"),e("li",null,"Local storage"),e("li",null,"Axios, i18n and boot files")],-1),J=e("div",{class:"q-pt-sm"},' 1. In the previous article we added a navigation button with a "to" element. More often you would add "@click=methodName" to the button like this: ',-1),O=t(" btnClicked is the name of the function that will be called in the Script section. If you are completely new to programming and would like to understand terms such as function, method, parameter, variable etc., click here. "),V=t(" When you click the button, code in the btnClicked function will run. "),W={class:"text-center q-pa-md"},R={class:"q-pt-sm"},F=t(' In version 3.2 of Vue, "script setup" was added as a new simpler way to format and use JavaScript. '),H=e("a",{href:"https://vuejs.org/api/sfc-script-setup.html"},"Read more",-1),L=t(". It looks like this. "),Y=e("div",{class:"q-pt-sm"}," The onMounted function is a special function provided by vue. It is called when the component or page is loaded. It can be useful to check something or run some code when the page is first displayed. For example, to check whether the app is running on a mobile device, what language the device is using etc. ",-1),E=e("div",{class:"q-pt-sm"}," Note the use of alert() and console.log() which are two useful Javascript methods. alert() will display a pop-up message to the user. console.log() will print a message to the JavaScript console which can be seen by choosing 'Display Javscript Console' in your browser. ",-1),U=e("div",{class:"q-pt-sm"}," Both of these methods are very useful for debugging your code. This is the process of testing and fixing code. For example, you can add a call to console.log() at the beginning of a function to make sure it is being called when you expect it to be. You can also use it to print out the result of calculations or the value of variables to check that they are what you expect. ",-1),z={class:"q-pt-sm"},K=t(" Click the button to see the whole page. "),G={class:"text-center"},X={class:"row text-subheader q-pt-sm"},Z=t(" Previous "),ee=e("div",{style:{"text-align":"right"},class:"full-width"}," Next: Add a library ",-1);function te(o,i,oe,se,ie,ne){const c=b("PreComponentDA");return a(),l(f,{class:"flex-center q-pa-md"},{default:n(()=>[w,e("div",null,[s(p,{flat:"",class:"q-pa-md"},{default:n(()=>[k,x,q,e("div",C,[I,P,T,Q,S,j,B,e("div",A,[M,N,$,D,J,s(c,{mytext:`
  <q-btn label="Test button"
   color="blue"
   @click="btnClicked">
  </q-btn>`}),O]),V,e("div",W,[s(d,{label:"Test button",color:"blue",onClick:o.btnClicked},null,8,["onClick"])]),e("div",R,[F,H,L,s(c,{mytext:`
  <script setup>
    import { onMounted } from 'vue'

    onMounted(() => {
      console.log('mounted')
    })

    function btnClicked () {
      alert('btnClicked')
    }
  <\/script>`})]),Y,E,U,e("div",z,[K,e("div",G,[s(d,{label:"My Page 2",color:"green",to:"/mypage2"})])])]),e("div",X,[u((a(),l(r,{class:"col",clickable:"",to:"intro",onClick:i[0]||(i[0]=m=>o.link="intro")},{default:n(()=>[Z]),_:1})),[[h]]),u((a(),l(r,{class:"col",clickable:"",to:"images",onClick:i[1]||(i[1]=m=>o.link="images")},{default:n(()=>[ee]),_:1})),[[h]])])]),_:1})])]),_:1})}var ye=v(y,[["render",te]]);export{ye as default};
